/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include "ImageWidget.h"
#include <QDebug>
#include <QPainter>
#include <QThread>

QSize fitSize(QSize const &size, int dw, int dh)
{
	int w = size.width();
	int h = size.height();
	if (w < 1 || h < 1) {
		return QSize();
	}
	if (dh * w > dw * h) {
		h = h * dw / w;
		w = dw;
	} else {
		w = w * dh / h;
		h = dh;
	}
	return QSize(w, h);
}

ImageWidget::ImageWidget(QWidget *parent)
	: QGLWidget(parent)
{
	startTimer(1000);
}

void ImageWidget::paintEvent(QPaintEvent *)
{
	int dw = std::min(1920, width());
	int dh = std::min(1080, height());
	QSize sz = fitSize(image_.size(), dw, dh);
	int x = (width() - sz.width()) / 2;
	int y = (height() - sz.height()) / 2;
	QPainter pr(this);
	pr.drawImage(QRect(x, y, sz.width(), sz.height()), image_, image_.rect());
}

void ImageWidget::timerEvent(QTimerEvent *event)
{
	(void)event;
	fps_ = frame_counter_;
	frame_counter_ = 0;
	qDebug() << QString("----- %1fps").arg(fps_);
}

void ImageWidget::setImage(const QImage &image)
{
	image_ = image;
	frame_counter_++;
	update();
}



